generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Attendees {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  listing_id String?   @db.Uuid
  person_id  String?   @db.Uuid
  comment    String?
  Listings   Listings? @relation(fields: [listing_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Person     Person?   @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Blog {
  blog_id    Int        @id @default(autoincrement())
  created_at DateTime?  @default(now()) @db.Timestamptz(6)
  title      String?
  desc       String?
  main_topic String?
  writer     String?    @db.Uuid
  content    String?
  likes      Int?       @default(0)
  Person     Person?    @relation(fields: [writer], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Comments   Comments[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Comments {
  comment_id_ Int       @id @default(autoincrement()) @map("comment_id ")
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  message     String?
  author_id   String?   @db.Uuid
  blog_id     Int?
  Person      Person?   @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Blog        Blog?     @relation(fields: [blog_id], references: [blog_id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Discussions {
  id         BigInt   @id @unique @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  aid        String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  messages   String   @default("")
  lid        String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Person     Person   @relation(fields: [aid], references: [id], onDelete: Cascade, map: "public_Discussions_aid_fkey")
  Listings   Listings @relation(fields: [lid], references: [id], onDelete: Cascade, map: "public_Discussions_lid_fkey")
}

model EventItem {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  start_time DateTime  @db.Timetz(6)
  name       String
  addr       String?
  event_id   String?   @db.Uuid
  Listings   Listings? @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Example {
  id   Int    @id @default(autoincrement())
  name String
  bio  String
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Listings {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime?     @default(now()) @db.Timestamptz(6)
  name        String?       @db.VarChar
  desc        String?       @db.VarChar
  route       String?       @db.VarChar
  start       DateTime?     @db.Timestamptz(6)
  author      String?       @db.Uuid
  prof_url    String?
  end         DateTime?     @db.Timestamptz(6)
  photo       String?
  mileage     Int
  Attendees   Attendees[]
  Discussions Discussions[]
  EventItem   EventItem[]
  Person      Person?       @relation(fields: [author], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Person {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at   DateTime?     @default(now()) @db.Timestamptz(6)
  fname        String?       @default("")
  lname        String?       @default("")
  about        String?       @default("") @db.VarChar
  email        String?       @default("")
  verified     Boolean?      @default(false)
  weekly_hours Int?
  Attendees    Attendees[]
  Blog         Blog[]
  Comments     Comments[]
  Discussions  Discussions[]
  Listings     Listings[]
}
